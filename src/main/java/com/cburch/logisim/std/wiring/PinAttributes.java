/**
 * This file is part of logisim-evolution.
 *
 * Logisim-evolution is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or (at your
 * option) any later version.
 *
 * Logisim-evolution is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along 
 * with logisim-evolution. If not, see <http://www.gnu.org/licenses/>.
 *
 * Original code by Carl Burch (http://www.cburch.com), 2011.
 * Subsequent modifications by:
 *   + College of the Holy Cross
 *     http://www.holycross.edu
 *   + Haute École Spécialisée Bernoise/Berner Fachhochschule
 *     http://www.bfh.ch
 *   + Haute École du paysage, d'ingénierie et d'architecture de Genève
 *     http://hepia.hesge.ch/
 *   + Haute École d'Ingénierie et de Gestion du Canton de Vaud
 *     http://www.heig-vd.ch/
 */

package com.cburch.logisim.std.wiring;

import static com.cburch.logisim.std.Strings.S;

import com.cburch.logisim.circuit.CircuitAttributes;
import com.cburch.logisim.circuit.RadixOption;
import com.cburch.logisim.comp.EndData;
import com.cburch.logisim.data.Attribute;
import com.cburch.logisim.data.AttributeOption;
import com.cburch.logisim.data.Attributes;
import com.cburch.logisim.data.BitWidth;
import com.cburch.logisim.data.Direction;
import com.cburch.logisim.instance.StdAttr;

import java.awt.Color;
import java.awt.Font;
import java.util.Arrays;
import java.util.List;

public class PinAttributes extends ProbeAttributes {
  /* I introduced the dummy attribute to be backward compatible with files generated by
   * the holycross branch of logisim (v4.0 up)
   */
  private static class DummyAttr extends Attribute<String> {
	public DummyAttr(String name) {
	  super(name,null);
	}
    @Override
    public String parse(String value) {
      return value;
    }
    @Override
    public boolean isHidden() {return true;}
  }
	
  public static final Attribute<String> ATTR_DUMMY = new DummyAttr("type");
  public static PinAttributes instance = new PinAttributes();

	public static final Attribute<String[]> PIN_NUMBER =
	  Attributes.forStringArray("pin-number", S.getter("pinNumberAttr"));

  // Port attributes

  public static final Attribute<Direction> PORT_FACING =
      Attributes.forDirection("a-port-facing", S.getter("portFacingAttr"));

  // Pin attributes used by port

  public static final Attribute<Boolean> PORT_SHOW_LABEL =
    Attributes.forBoolean("port-show-label", S.getter("portShowLabelAttr"));

  public static final Attribute<Boolean> PORT_SHOW_PIN_NUMBER =
    Attributes.forBoolean("port-show-pin-number", S.getter("portShowPinNumberAttr"));

  public static final AttributeOption PINNO_ABOVE_LEFT =
    new AttributeOption("above-left", S.getter("pinNumberAboveLeftOption"));
  public static final AttributeOption PINNO_BELOW_RIGHT =
    new AttributeOption("below-right", S.getter("pinNumberBelowRightOption"));

	public static final Attribute<AttributeOption> PIN_NUMBER_POSITION =
    Attributes.forOption(
      "pin-number-position",
      S.getter("pinNumberPositionAttr"),
      new AttributeOption[] {PINNO_ABOVE_LEFT, PINNO_BELOW_RIGHT});

  public static final Attribute<Font> PORT_LABEL_FONT =
      Attributes.forFont("port-label-font", S.getter("portLabelFontAttr"));

  public static final Attribute<Color> PORT_LABEL_COLOR =
      Attributes.forColor("port-label-color", S.getter("portLabelColorAttr"));

  public static final Attribute<Font> PIN_NUMBER_FONT =
      Attributes.forFont("pin-number-font", S.getter("pinNumberFontAttr"));

  public static final Attribute<Color> PIN_NUMBER_COLOR =
      Attributes.forColor("pin-number-color", S.getter("pinNumberColorAttr"));

  public static final AttributeOption PORT_NEGATION_NONE =
    new AttributeOption("none", S.getter("portNegationNoneOption"));
  public static final AttributeOption PORT_NEGATION_CIRCLE =
    new AttributeOption("circle", S.getter("portNegationCircleOption"));
  public static final AttributeOption PORT_NEGATION_BAR =
    new AttributeOption("bar", S.getter("portNegationBarOption"));

  public static final Attribute<AttributeOption> PORT_NEGATION_STYLE =
    Attributes.forOption(
      "port-negation-style",
      S.getter("portNegationStyleAttr"),
      new AttributeOption[] {PORT_NEGATION_NONE, PORT_NEGATION_CIRCLE, PORT_NEGATION_BAR});

  // All attributes stored on pin
  private static final List<Attribute<?>> ATTRIBUTES =
      Arrays.asList(
          new Attribute<?>[] {
            StdAttr.FACING,
            Pin.ATTR_TYPE,
            StdAttr.WIDTH,
            Pin.ATTR_TRISTATE,
            Pin.ATTR_PULL,
            StdAttr.LABEL,
            PIN_NUMBER,
            StdAttr.LABEL_FONT,
            RadixOption.ATTRIBUTE,
            PROBEAPPEARANCE,
            PORT_SHOW_LABEL,
            PORT_LABEL_FONT,
            PORT_LABEL_COLOR,
            PORT_NEGATION_STYLE,
            PORT_SHOW_PIN_NUMBER,
            PIN_NUMBER_POSITION,
            PIN_NUMBER_FONT,
            PIN_NUMBER_COLOR
          });

  // Attributes editable via pin
  private static final List<Attribute<?>> PIN_ATTRIBUTES =
      Arrays.asList(
          new Attribute<?>[] {
            StdAttr.FACING,
            Pin.ATTR_TYPE,
            StdAttr.WIDTH,
            Pin.ATTR_TRISTATE,
            Pin.ATTR_PULL,
            StdAttr.LABEL,
            PIN_NUMBER,
            StdAttr.LABEL_FONT,
            RadixOption.ATTRIBUTE,
            PROBEAPPEARANCE
          });

  // Attributes editable via port
  public static final List<Attribute<?>> PORT_ATTRIBUTES =
      Arrays.asList(
          new Attribute<?>[] {
              PORT_FACING,
              StdAttr.LABEL,
              PIN_NUMBER,
              PORT_SHOW_LABEL,
              PORT_LABEL_FONT,
              PORT_LABEL_COLOR,
              PORT_NEGATION_STYLE,
              PORT_SHOW_PIN_NUMBER,
              PIN_NUMBER_POSITION,
              PIN_NUMBER_FONT,
              PIN_NUMBER_COLOR
          });    

  // Pin attributes

  BitWidth width = BitWidth.ONE;
  boolean threeState = false; // true;
  int type = EndData.INPUT_ONLY;
  Object pull = Pin.PULL_NONE;
  AttributeOption Appearance = ProbeAttributes.APPEAR_EVOLUTION_NEW;

  // Port attributes

  static final Font defaultPortLabelFont = new Font("SansSerif", Font.PLAIN, 10);
  static final Color defaultPortLabelColor = Color.black;
  static final Font defaultPinNumberFont = new Font("SansSerif", Font.PLAIN, 8);
  static final Color defaultPinNumberColor = Color.black;

  public boolean portShowLabel = true;
  public Font portLabelFont = defaultPortLabelFont;
  public Color portLabelColor = defaultPortLabelColor;
  public AttributeOption portNegationStyle = PORT_NEGATION_NONE;
  public String[] pinNumber = Attributes.emptyStringArray;
  public boolean portShowPinNumber = true;
  public AttributeOption pinNumberPosition = PINNO_ABOVE_LEFT;
  public Font pinNumberFont = defaultPinNumberFont;
  public Color pinNumberColor = defaultPinNumberColor;

  public PinAttributes() {}
  
  public String getPinNumber(int variantIndex) {
    if (variantIndex == CircuitAttributes.ALL_VARIANTS)
      return PIN_NUMBER.toStandardString(pinNumber);
    else if (pinNumber.length == 1)
      return pinNumber[0];
    else if (variantIndex >= 0 && variantIndex < pinNumber.length)
      return pinNumber[variantIndex];
    else
      return "";
  }

  @Override
  public List<Attribute<?>> getAllAttributes() {
    return ATTRIBUTES;
  }

  @Override
  public List<Attribute<?>> getAttributes() {
    return PIN_ATTRIBUTES;
  }

  @Override
  public boolean isToSave(Attribute<?> attr) {
    return attr != ATTR_DUMMY;
  }

  @Override
  @SuppressWarnings("unchecked")
  public <V> V getValue(Attribute<V> attr) {
    if (attr == StdAttr.WIDTH) return (V) width;
    if (attr == Pin.ATTR_TRISTATE) return (V) Boolean.valueOf(threeState);
    if (attr == Pin.ATTR_TYPE) return (V) Boolean.valueOf(type == EndData.OUTPUT_ONLY);
    if (attr == Pin.ATTR_PULL) return (V) pull;
    if (attr == PROBEAPPEARANCE) return (V) Appearance;
    if (attr == PIN_NUMBER) return (V) pinNumber;
    if (attr == ATTR_DUMMY) return (V) "nochange";
    if (attr == PORT_SHOW_LABEL) return (V) (Boolean) portShowLabel;
    if (attr == PORT_LABEL_FONT) return (V) portLabelFont;
    if (attr == PORT_LABEL_COLOR) return (V) portLabelColor;
    if (attr == PORT_NEGATION_STYLE) return (V) portNegationStyle;
    if (attr == PORT_SHOW_PIN_NUMBER) return (V) (Boolean) portShowPinNumber;
    if (attr == PIN_NUMBER_POSITION) return (V) pinNumberPosition;
    if (attr == PIN_NUMBER_FONT) return (V) pinNumberFont;
    if (attr == PIN_NUMBER_COLOR) return (V) pinNumberColor;
    return super.getValue(attr);
  }

  boolean isInput() {
    return type != EndData.OUTPUT_ONLY;
  }

  boolean isOutput() {
    return type != EndData.INPUT_ONLY;
  }

  @SuppressWarnings("unchecked")
  @Override
  public <V> void setValue(Attribute<V> attr, V value) {
    if (attr == ATTR_DUMMY) {
      if (value.equals("output")) {
        if (type != EndData.OUTPUT_ONLY) {
          type = EndData.OUTPUT_ONLY;
          fireAttributeValueChanged((Attribute<V>)Pin.ATTR_TYPE,(V)Boolean.valueOf(type == EndData.OUTPUT_ONLY),null);
          return;
        }
      }
    } else if (attr == StdAttr.WIDTH) {
      BitWidth NewWidth = (BitWidth) value;
      if (width == NewWidth) return;
      width = (BitWidth) value;
      if (width.getWidth() > 8 && Appearance == ProbeAttributes.APPEAR_EVOLUTION_NEW)
        super.setValue(RadixOption.ATTRIBUTE, RadixOption.RADIX_16);
    } else if (attr == Pin.ATTR_TRISTATE) {
      boolean NewThree = ((Boolean) value).booleanValue();
      if (threeState == NewThree) return;
      threeState = NewThree;
    } else if (attr == Pin.ATTR_TYPE) {
      int Newtype = ((Boolean) value).booleanValue() ? EndData.OUTPUT_ONLY : EndData.INPUT_ONLY;
      if (type == Newtype) return;
      type = Newtype;
    } else if (attr == Pin.ATTR_PULL) {
      Object newPull = value;
      if (pull.equals(newPull)) return;
      pull = newPull;
    } else if (attr == PROBEAPPEARANCE) {
      AttributeOption NewAppearance = (AttributeOption) value;
      if (Appearance.equals(NewAppearance)) return;
      Appearance = NewAppearance;
    } else if (attr == RadixOption.ATTRIBUTE) {
      if (width.getWidth() == 1) {
        super.setValue(RadixOption.ATTRIBUTE, RadixOption.RADIX_2);
      } else super.setValue(attr, value);
      return;
    }
    else if (attr == PIN_NUMBER)
      pinNumber = (String[]) value;
    else if (attr == PORT_SHOW_LABEL)
      portShowLabel = (Boolean) value;
    else if (attr == PORT_LABEL_FONT)
      portLabelFont = (Font) value;
    else if (attr == PORT_LABEL_COLOR)
      portLabelColor = (Color) value;
    else if (attr == PORT_NEGATION_STYLE)
      portNegationStyle = (AttributeOption) value;
    else if (attr == PORT_SHOW_PIN_NUMBER)
      portShowPinNumber = (Boolean) value;
    else if (attr == PIN_NUMBER_POSITION)
      pinNumberPosition = (AttributeOption) value;
    else if (attr == PIN_NUMBER_FONT)
      pinNumberFont = (Font) value;
    else if (attr == PIN_NUMBER_COLOR)
      pinNumberColor = (Color) value;
    else {
      super.setValue(attr, value);
      return;
    }
    fireAttributeValueChanged(attr, value, null);
  }
}
